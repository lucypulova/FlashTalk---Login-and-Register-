import { Router, Request, Response } from "express";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";

import { users, User, saveUsersToFile } from "../data/constantUsers";
import { JWT_SECRET } from "@config/envConfig";

const router = Router();

/**
 * –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –∏–º–µ–π–ª –∞–¥—Ä–µ—Å—ä—Ç –µ –≤—ä–≤ –≤–∞–ª–∏–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç
 */
const isValidEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
 * - –í–∞–ª–∏–¥–∏—Ä–∞ –≤—Ö–æ–¥–Ω–∏ –¥–∞–Ω–Ω–∏
 * - –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –∑–∞ –¥—É–±–ª–∏—Ä–∞–Ω –∏–º–µ–π–ª
 * - –•–µ—à–∏—Ä–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞
 * - –ó–∞–ø–∏—Å–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –≤—ä–≤ "—Ñ–∞–ª—à–∏–≤–∞—Ç–∞ –±–∞–∑–∞" (users.json)
 */
const handleRegister = async (req: Request, res: Response): Promise<void> => {
  const { username, email, password, displayName } = req.body;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –ø—Ä–∞–∑–Ω–∏ –ø–æ–ª–µ—Ç–∞
  if (!username || !email || !password || !displayName) {
    res.status(400).json({ message: "All fields are required." });
    return;
  }

  // –ù–µ–≤–∞–ª–∏–¥–µ–Ω –∏–º–µ–π–ª
  if (!isValidEmail(email)) {
    res.status(400).json({ message: "Invalid email format." });
    return;
  }

  // –ò–º–µ–π–ª—ä—Ç –≤–µ—á–µ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞
  const emailExists = users.some(u => u.email === email);
  if (emailExists) {
    //console.log("Jopa")
    res.status(409).json({ message: "Email already in use." });
    return;
  }

  // –•–µ—à–∏—Ä–∞–Ω–µ –Ω–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞
  const hashedPassword = await bcrypt.hash(password, 10);

  // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
  const newUser: User = { username, email, password: hashedPassword, displayName };
  users.push(newUser);
  saveUsersToFile(); // –ó–∞–ø–∏—Å –≤ JSON —Ñ–∞–π–ª–∞

  res.status(201).json({
    message: "User registered successfully",
    user: { username, displayName, email }
  });
};

/**
 * –í—Ö–æ–¥ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
 * - –í–∞–ª–∏–¥–∏—Ä–∞ –≤—Ö–æ–¥–Ω–∏ –¥–∞–Ω–Ω–∏
 * - –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
 * - –°—Ä–∞–≤–Ω—è–≤–∞ –ø–∞—Ä–æ–ª–∞—Ç–∞ —Å —Ö–µ—à–∞
 * - –ò–∑–¥–∞–≤–∞ JWT —Ç–æ–∫–µ–Ω –ø—Ä–∏ —É—Å–ø–µ—Ö
 */
const handleLogin = async (req: Request, res: Response): Promise<void> => {
  const { email, password } = req.body;

  // –ü—Ä–∞–∑–Ω–∏ –ø–æ–ª–µ—Ç–∞
  if (!email || !password) {
    res.status(400).json({ message: "Email and password are required." });
    return;
  }

  // –ù–µ–≤–∞–ª–∏–¥–µ–Ω –∏–º–µ–π–ª
  if (!isValidEmail(email)) {
    res.status(400).json({ message: "Invalid email format." });
    return;
  }

  // –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
  const user = users.find(u => u.email === email);
  if (!user) {
    res.status(401).json({ message: "Invalid email or password." });
    return;
  }

  // –ì—Ä–µ—à–Ω–∞ –ø–∞—Ä–æ–ª–∞
  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) {
    res.status(401).json({ message: "Invalid email or password." });
    return;
  }

  // –°—ä–∑–¥–∞–≤–∞–º–µ JWT —Ç–æ–∫–µ–Ω
  const token = jwt.sign(
    {
      email: user.email,
      username: user.username,
      displayName: user.displayName
    },
    JWT_SECRET,
    { expiresIn: "2h" }
  );

  res.status(200).json({
    message: "Login successful",
    token, // ü™ô –ò–∑–ø—Ä–∞—â–∞–º–µ —Ç–æ–∫–µ–Ω–∞ –∫—ä–º –∫–ª–∏–µ–Ω—Ç–∞
    user: {
      username: user.username,
      displayName: user.displayName,
      email: user.email
    }
  });
};

// –†—É—Ç–æ–≤–µ
router.post("/register", handleRegister);
router.post("/login", handleLogin);

export default router;
